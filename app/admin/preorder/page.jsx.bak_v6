"use client";

import { useEffect, useMemo, useState } from "react";

const TABS = ["settings", "products", "orders", "webhooks"];

function Tab({ value, current, onClick, children }){
  const active = current === value;
  return (
    <button
      onClick={() => onClick(value)}
      className={
        "rounded-md px-3 py-1 text-sm transition " +
        (active
          ? "bg-black text-white dark:bg-white dark:text-black"
          : "hover:bg-black/5 dark:hover:bg-white/5")
      }
    >
      {children}
    </button>
  );
}

function Badge({ kind = "neutral", children }){
  const styles = {
    success: "bg-green-500/15 text-green-500",
    warn: "bg-yellow-500/15 text-yellow-400",
    neutral: "bg-white/10 text-white/80",
  };
  return (
    <span className={"inline-flex items-center rounded-full px-2.5 py-1 text-xs font-semibold " + (styles[kind] || styles.neutral)}>
      {children}
    </span>
  );
}

function Currency({ value }){
  const v = Number(value || 0);
  return <span>{v.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>;
}

function OrdersTable({ orders, onVerify, verifyingId, expanded, setExpanded }){
  if (!orders?.length){
async function loadSettings(){
  setLoadingSettings(true);
  try{
    const r = await fetch('/api/admin/preorder/settings', { cache: 'no-store' });
    const d = await r.json();
    if(d?.ok) setSettings(d.settings || d.data || d);
  }catch(e){ console.error('settings load failed', e); }
  finally{ setLoadingSettings(false); }
}
async function loadProducts(){
  setLoadingProducts(true);
  try{
    const r = await fetch('/api/admin/preorder/products', { cache: 'no-store' });
    const d = await r.json();
    if(Array.isArray(d?.products)) setProducts(d.products);
    else if(Array.isArray(d?.data)) setProducts(d.data);
    else setProducts([]);
  }catch(e){ console.error('products load failed', e); setProducts([]); }
  finally{ setLoadingProducts(false); }
}
async function loadWebhooks(){
  setLoadingWebhooks(true);
  try{
    const r = await fetch('/api/admin/preorder/webhooks', { cache: 'no-store' });
    const d = await r.json();
    const list = Array.isArray(d?.webhooks) ? d.webhooks : Array.isArray(d) ? d : [];
    setWebhooks(list);
  }catch(e){ console.error('webhooks load failed', e); setWebhooks([]); }
  finally{ setLoadingWebhooks(false); }
}

    return (
      <div className="border border-white/10 rounded-2xl p-8 text-sm opacity-80">
        No pre-orders found yet.
      </div>
    );
  }
  return (
    <div className="overflow-x-auto rounded-2xl border border-white/10">
      <table className="min-w-full text-sm">
        <thead className="bg-white/5">
          <tr>
            <th className="px-4 py-3 text-left">Created</th>
            <th className="px-4 py-3 text-left">Customer</th>
            <th className="px-4 py-3 text-right">Advance Due</th>
            <th className="px-4 py-3 text-right">Advance Paid</th>
            <th className="px-4 py-3 text-left">Status</th>
            <th className="px-4 py-3 text-left">Invoice ID</th>
            <th className="px-4 py-3"></th>
          </tr>
        </thead>
        <tbody>
          {orders.map((o) => (
            <tr key={o.id} className="border-t border-white/10">
              <td className="px-4 py-3">{new Date(o.createdAt).toLocaleString()}</td>
              <td className="px-4 py-3">
                {o?.customer?.name || o?.customer?.phone || o?.customer?.email || "—"}
              </td>
              <td className="px-4 py-3 text-right"><Currency value={o.advanceDue} /></td>
              <td className="px-4 py-3 text-right"><Currency value={o.advancePaid} /></td>
              <td className="px-4 py-3">
                {o.paid ? <Badge kind="success">Paid</Badge> : <Badge kind="warn">Not paid</Badge>}
                <span className="ml-2 opacity-70 text-xs">({o.uddoktaStatus || (o.paid ? "PAID" : "PENDING")})</span>
              </td>
              <td className="px-4 py-3 font-mono text-xs">{o.invoiceId || "—"}</td>
              <td className="px-4 py-3 text-right flex gap-2 justify-end">
                {o.invoiceId ? (
                  <button onClick={() => navigator.clipboard.writeText(o.invoiceId)} className="px-2 py-1 rounded-md border border-white/15 hover:bg-white/5 text-xs">Copy ID</button>
                ) : null}
                <button onClick={() => setExpanded(prev => ({...prev, [o.id]: !prev[o.id]}))} className="px-2 py-1 rounded-md border border-white/15 hover:bg-white/5 text-xs">{expanded[o.id] ? "Hide" : "Details"}</button>
                {o.invoiceId ? (
                  <button
                    onClick={() => onVerify(o.id)}
                    disabled={verifyingId === o.id}
                    className="px-2 py-1 rounded-md border border-white/15 hover:bg-white/5 text-xs disabled:opacity-60"
                  >
                    {verifyingId === o.id ? "Verifying..." : "Verify now"}
                  </button>
                ) : null}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default function AdminPreorderPage(){
  const [tab, setTab] = useState("orders");
  const [orders, setOrders] = useState([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const [verifyingId, setVerifyingId] = useState(null);

  async function loadOrders(){
    setLoadingOrders(true);
    try{
      const res = await fetch("/api/admin/preorder/orders", { cache: "no-store" });
      const data = await res.json();
      if(data?.ok && Array.isArray(data.orders)){
        setOrders(data.orders);
      }else{
        setOrders([]);
      }
    }catch(e){
      console.error("Failed to load orders", e);
      setOrders([]);
    }finally{
      setLoadingOrders(false);
    }
  }

  useEffect(() => {
    loadOrders();
  }, []);

  async function verifyNow(orderId){
    setVerifyingId(orderId);
    try{
      const res = await fetch("/api/admin/preorder/orders/verify", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ orderId }),
      });
      const data = await res.json();
      // re-load after verify
      await loadOrders();
    }catch(e){
      console.error("verify failed", e);
    }finally{
      setVerifyingId(null);
    }
  }

  return (
    <main className="container mx-auto max-w-6xl px-4 py-8">
      <h1 className="text-2xl md:text-3xl font-extrabold tracking-tight">Preorder Admin</h1>

      <div className="mt-6 flex gap-2">
        {TABS.map(v => <Tab key={v} value={v} current={tab} onClick={setTab}>{v[0].toUpperCase()+v.slice(1)}</Tab>)}
      </div>

      <div className="mt-6">
        {tab === "orders" && (
          <section className="space-y-4">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">Orders</h2>
              <button
                onClick={loadOrders}
                className="px-3 py-1 rounded-md border border-white/15 hover:bg-white/5"
              >
                Refresh
              </button>
            </div>
            {loadingOrders ? (
              <div className="rounded-xl border border-white/10 p-6 text-sm opacity-80">Loading orders…</div>
            ) : (
              <OrdersTable orders={orders} onVerify={verifyNow} verifyingId={verifyingId} expanded={expanded} setExpanded={setExpanded} />
            )}
          </section>
        )}

        {tab === "settings" && (
          <section className="rounded-xl border border-white/10 p-6 text-sm opacity-80">
            Settings UI coming next.
          </section>
        )}
        {tab === "products" && (
          <section className="rounded-xl border border-white/10 p-6 text-sm opacity-80">
            Products UI coming next.
          </section>
        )}
        {tab === "webhooks" && (
          <section className="rounded-xl border border-white/10 p-6 text-sm opacity-80">
            Webhooks UI coming next.
          </section>
        )}
      </div>
    </main>
  );
}
