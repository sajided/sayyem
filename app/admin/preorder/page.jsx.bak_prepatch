"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

const TABS = ["settings", "products", "orders", "webhooks"];

function Tab({ value, current, onClick, children }){
  const active = current === value;
  return (
    <button
      onClick={()=>onClick(value)}
      className={"rounded-md px-3 py-1 text-sm " + (active ? "bg-black text-white dark:bg-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/5")}
    >
      {children}
    </button>
  );
}

function Section({ title, actions, children }){
  return (
    <section className="rounded-2xl border border-black/10 p-4 dark:border-white/10">
      <div className="mb-3 flex items-center justify-between">
        <h2 className="text-lg font-semibold">{title}</h2>
        {actions}
      </div>
      {children}
    </section>
  );
}

async function copyToClipboard(text){
  try{
    if (navigator.clipboard?.writeText){
      await navigator.clipboard.writeText(text);
      alert("Copied");
      return;
    }
  }catch{}
  try{
    const ta = document.createElement("textarea");
    ta.value = text;
    ta.style.position = "fixed";
    ta.style.left = "-9999px";
    document.body.appendChild(ta);
    ta.focus();
    ta.select();
    document.execCommand("copy");
    ta.remove();
    alert("Copied");
  }catch{
    window.prompt("Copy this ID:", text);
  }
}

export default function AdminPreorderPage(){
  const [tab, setTab] = useState("orders");
  const [settings, setSettings] = useState(null);
  const [webhooksDraft, setWebhooksDraft] = useState([]);
  const [products, setProducts] = useState([]);
  const [orders, setOrders] = useState([]);
  const [saving, setSaving] = useState(false);
  const [loadingProducts, setLoadingProducts] = useState(false);
  const [loadingOrders, setLoadingOrders] = useState(false);

  useEffect(()=>{
    loadSettings();
    loadProducts();
    loadOrders();
  }, []);

  async function loadSettings(){
    try{
      const r = await fetch("/api/admin/preorder/settings");
      const j = await r.json();
      if (j.ok){
        setSettings(j.data);
        setWebhooksDraft(j.data?.webhooks || []);
      }
    }catch{}
  }

  async function saveSettings(){
    try{
      setSaving(true);
      const r = await fetch("/api/admin/preorder/settings", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...settings, webhooks: webhooksDraft })
      });
      const j = await r.json();
      if (!j.ok) return alert(j.error || "Failed to save");
      setSettings(j.data);
      alert("Saved");
    }catch(e){
      alert(e.message);
    }finally{
      setSaving(false);
    }
  }

  function onSettingsChange(key, val){
    setSettings(s => ({ ...(s||{}), [key]: val }));
  }

  async function loadProducts(){
    try{
      setLoadingProducts(true);
      const r = await fetch("/api/admin/preorder/products");
      const j = await r.json();
      if (j.ok) setProducts(j.data || []);
    }catch{} finally { setLoadingProducts(false); }
  }

  async function loadOrders(){
    try{
      setLoadingOrders(true);
      const r = await fetch(`/api/admin/preorder/orders?t=${Date.now()}`, { cache: "no-store" });
      const j = await r.json();
      if (j.ok) setOrders(j.data || []);
    }catch{} finally { setLoadingOrders(false); }
  }

  function addWebhookRow(){ setWebhooksDraft(arr => [...arr, { url: "" }]); }
  function updateWebhook(idx, key, val){ setWebhooksDraft(arr => arr.map((w,i)=> i===idx ? { ...w, [key]: val } : w)); }
  function removeWebhook(idx){ setWebhooksDraft(arr => arr.filter((_,i)=> i!==idx)); }

async function setStatus(id, status){
  // optimistic UI
  setOrders(arr => arr.map(o => o._id === id ? { ...o, status } : o));
  try{
    const r = await fetch('/api/admin/preorder/orders', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id, status })
    });
    const text = await r.text();
    const j = text ? JSON.parse(text) : { ok: r.ok };
    if (!r.ok || !j?.ok) throw new Error(j?.error || `HTTP ${r.status}`);
  }catch(e){
    alert(e.message || 'Failed to update');
    await loadOrders(); // rollback
  }
}

  return (
    <main className="mx-auto max-w-7xl p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Pre-orders Admin</h1>
        <div className="flex gap-2 rounded-lg border border-black/10 p-1 dark:border-white/10">
          {TABS.map(x => (
            <Tab key={x} value={x} current={tab} onClick={setTab}>
              {x[0].toUpperCase() + x.slice(1)}
            </Tab>
          ))}
        </div>
      </div>

      {tab === "settings" && (
        <Section title="Pre-order Settings" actions={
          <button onClick={saveSettings} disabled={saving} className="rounded-lg bg-black px-3 py-2 text-sm text-white hover:opacity-90 dark:bg-white dark:text-black">
            {saving ? "Saving…" : "Save"}
          </button>
        }>
          {!settings ? <div className="text-sm opacity-70">Loading…</div> : (
            <div className="grid gap-4 md:grid-cols-2">
              <label className="grid gap-1 text-sm">
                <span>Enable pre-orders</span>
                <input type="checkbox" checked={!!settings.preOrderEnabled} onChange={e=>onSettingsChange("preOrderEnabled", e.target.checked)} />
              </label>
              <label className="grid gap-1 text-sm">
                <span>Default advance %</span>
                <input type="number" value={settings.preOrderDefaultAdvancePercent ?? 30}
                  onChange={e=>onSettingsChange("preOrderDefaultAdvancePercent", Number(e.target.value)||0)}
                  className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
              </label>
              <label className="grid gap-1 text-sm md:col-span-2">
                <span>Default lead time note</span>
                <input value={settings.preOrderDefaultLeadTimeText || ""}
                  onChange={e=>onSettingsChange("preOrderDefaultLeadTimeText", e.target.value)}
                  className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
              </label>

              <div className="grid gap-1 text-sm md:col-span-2">
                <span className="font-medium">bKash Credentials</span>
                <div className="grid gap-3 md:grid-cols-2">
                  <label className="grid gap-1 text-sm">
                    <span>Username</span>
                    <input value={settings?.bkashUsername || ""} onChange={e=>onSettingsChange("bkashUsername", e.target.value)} className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
                  </label>
                  <label className="grid gap-1 text-sm">
                    <span>Password</span>
                    <input type="password" value={settings?.bkashPassword || ""} onChange={e=>onSettingsChange("bkashPassword", e.target.value)} className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
                  </label>
                  <label className="grid gap-1 text-sm">
                    <span>App Key</span>
                    <input value={settings?.bkashAppKey || ""} onChange={e=>onSettingsChange("bkashAppKey", e.target.value)} className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
                  </label>
                  <label className="grid gap-1 text-sm">
                    <span>App Secret</span>
                    <input type="password" value={settings?.bkashAppSecret || ""} onChange={e=>onSettingsChange("bkashAppSecret", e.target.value)} className="rounded-lg border border-black/10 px-3 py-2 dark:border-white/10 dark:bg-black/60" />
                  </label>
                </div>
              </div>
              <label className="flex items-center gap-2 text-sm">
                <input type="checkbox" checked={!!settings?.bkashSandbox} onChange={e=>onSettingsChange("bkashSandbox", e.target.checked)} /> Use bKash Sandbox
              </label>

              <div className="grid grid-cols-2 gap-4 md:col-span-2">
                <label className="flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={!!settings.bkashEnabled} onChange={e=>onSettingsChange("bkashEnabled", e.target.checked)} /> Enable bKash
                </label>
                <label className="flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={!!settings.uddoktaPayEnabled} onChange={e=>onSettingsChange("uddoktaPayEnabled", e.target.checked)} /> Enable Uddokta Pay
                </label>
              </div>
            </div>
          )}
        </Section>
      )}

      {tab === "products" && (
        <Section title="Manage Pre-order Products">
          <div className="hidden md:block overflow-x-auto">
            <table className="w-full border-separate border-spacing-y-3 text-sm">
              <thead className="text-left opacity-60">
                <tr><th className="px-3">Product</th><th>Price</th><th>Pre-order</th><th>Advance %</th><th>Lead time</th></tr>
              </thead>
              <tbody>
                {products.map(p => {
                  const title = p.title || p.name || p.slug;
                  const img = p.images?.[0];
                  return (
                    <tr key={p._id} className="rounded-xl bg-black/5 align-top dark:bg-white/5">
                      <td className="px-3 py-2">
                        <div className="flex items-center gap-3">
                          <div className="relative h-12 w-12 overflow-hidden rounded-lg border border-black/10 dark:border-white/10">
                            {img && <Image src={img} alt={title} fill className="object-cover" />}
                          </div>
                          <div>
                            <div className="font-medium">{title}</div>
                            <div className="text-xs opacity-70">{p.slug}</div>
                          </div>
                        </div>
                      </td>
                      <td className="py-2">৳{p.price}</td>
                      <td className="py-2">
                        <input type="checkbox" defaultChecked={!!p.isPreOrder} onChange={async e=>{
                          await fetch(`/api/admin/preorder/products/${p._id}`, {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ isPreOrder: e.target.checked })
                          });
                          loadProducts();
                        }} />
                      </td>
                      <td className="py-2">
                        <input type="number" defaultValue={p.preOrderAdvancePercent ?? (settings?.preOrderDefaultAdvancePercent || 30)}
                          onBlur={async e=>{
                            await fetch(`/api/admin/preorder/products/${p._id}`, {
                              method: "PUT",
                              headers: { "Content-Type": "application/json" },
                              body: JSON.stringify({ preOrderAdvancePercent: Number(e.target.value)||0 })
                            });
                          }}
                          className="w-20 rounded-lg border border-black/10 px-2 py-1 text-sm dark:border-white/10 dark:bg-black/60" />
                      </td>
                      <td className="py-2">
                        <input defaultValue={p.preOrderLeadTimeText || ""}
                          onBlur={async e=>{
                            await fetch(`/api/admin/preorder/products/${p._id}`, {
                              method: "PUT",
                              headers: { "Content-Type": "application/json" },
                              body: JSON.stringify({ preOrderLeadTimeText: e.target.value })
                            });
                          }}
                          className="w-48 rounded-lg border border-black/10 px-2 py-1 text-sm dark:border-white/10 dark:bg-black/60" />
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </Section>
      )}

      {tab === "orders" && (
  <Section
    title="Pre-orders"
    actions={
      <button
        onClick={loadOrders}
        className="rounded-lg border border-black/10 px-3 py-2 text-sm hover:bg-black/5 dark:border-white/10 dark:hover:bg-white/5"
      >
        {loadingOrders ? "Refreshing…" : "Refresh"}
      </button>
    }
  >
    <div className="grid gap-4 sm:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4">
      {orders.map(o => (
        <div key={o._id} className="rounded-2xl border border-black/10 p-4 shadow-sm bg-black/[0.04] hover:bg-black/[0.06] transition dark:border-white/10 dark:bg-white/[0.04] dark:hover:bg-white/[0.06]">
          <div className="flex items-start justify-between gap-3">
            <div>
              <div className="text-[11px] opacity-70">{new Date(o.createdAt).toLocaleString()}</div>
              <div className="font-mono text-[11px]">{o._id}</div>
            </div>
            <button
              className="rounded-lg border border-black/10 px-3 py-1 text-xs hover:bg-black/5 dark:border-white/10 dark:hover:bg-white/5"
              onClick={()=>copyToClipboard(o._id)}
            >
              Copy ID
            </button>
          </div>

          <div className="mt-3 grid gap-3 text-sm">
            <div className="font-medium">{o.name}</div>
            <div className="opacity-70 text-xs">{o.address}, {o.city}</div>

            <div className="flex items-center justify-between gap-3">
              <div>
                <div>{o.phone}</div>
                <div className="text-xs opacity-70">{o.email || "—"}</div>
              </div>
              <div className="flex items-center gap-3">
                <div className="relative h-12 w-12 overflow-hidden rounded-lg border border-black/10 dark:border-white/10">
                  {o.productImage && <img src={o.productImage} alt={o.productTitle || "Product"} className="h-full w-full object-cover" />}
                </div>
                <div>
                  <div className="font-medium line-clamp-2">{o.productTitle || "—"}</div>
                  <div className="text-xs opacity-70">{o.slug}</div>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-3 items-center gap-2 text-sm">
              <div className="truncate"><span className="opacity-70">Total:</span> ৳{o.total}</div>
              <div className="truncate text-emerald-600 dark:text-emerald-400 text-xs"><span className="opacity-70">Paid:</span> ৳{o.paid}</div>
              <div className="truncate text-xs opacity-70"><span className="">Due:</span> ৳{o.due}</div>
            </div>
          </div>

          <div className="mt-3">
            <select
              value={o.status || "approved"}
              onChange={e=>setStatus(o._id, e.target.value)}
              className="w-full rounded-lg border border-black/10 bg-transparent px-2 py-2 text-sm dark:border-white/10"
            >
              <option value="approved">Approved</option>
              <option value="at_warehouse">At warehouse</option>
              <option value="in_transit">In transit</option>
              <option value="out_for_delivery">Out for delivery</option>
              <option value="delivered">Delivered</option>
            </select>
          </div>
        </div>
      ))}
    </div>
  </Section>
)}
{tab === "webhooks" && (
        <Section title="Webhooks" actions={
          <button onClick={saveSettings} disabled={saving} className="rounded-lg bg-black px-3 py-2 text-sm text-white hover:opacity-90 dark:bg-white dark:text-black">Save</button>
        }>
          <div className="space-y-3">
            {(webhooksDraft?.length === 0) && <div className="text-sm opacity-70">No webhooks added yet.</div>}
            {webhooksDraft?.map((w, idx) => (
              <div key={idx} className="flex items-center gap-2">
                <input
                  placeholder="https://discord.com/api/webhooks/..."
                  value={w?.url || ""}
                  onChange={e=>updateWebhook(idx, "url", e.target.value)}
                  className="flex-1 rounded-lg border border-black/10 px-3 py-2 text-sm dark:border-white/10 dark:bg-black/60"
                />
                <button onClick={()=>removeWebhook(idx)} className="rounded-lg border border-black/10 px-3 py-2 text-sm hover:bg-black/5 dark:border-white/10 dark:hover:bg-white/5">Remove</button>
              </div>
            ))}
            <div>
              <button onClick={addWebhookRow} className="rounded-lg border border-black/10 px-3 py-2 text-sm hover:bg-black/5 dark:border-white/10 dark:hover:bg-white/5">+ Add Webhook</button>
            </div>
            <div className="pt-2">
              <button
                onClick={async ()=>{ await fetch("/api/admin/preorder/webhooks/test", { method:"POST" }); alert("Test webhook sent"); }}
                className="rounded-lg bg-black px-3 py-2 text-sm text-white hover:opacity-90 dark:bg-white dark:text-black"
              >
                Send Test to Webhooks
              </button>
            </div>
          </div>
        </Section>
      )}
    </main>
  );
}